[fortran, fortran_openacc]

    integer :: i,k,ll,s
    real(C_DOUBLE) :: r,u,w,t,p, stencil(4), d3_vals(NUM_VARS), vals(NUM_VARS), hv_coef

    hv_coef = -hv_beta * dz / (16*dt)

    do k = 1 , nz+1
      do i = 1 , nx
        do ll = 1 , NUM_VARS
          do s = 1 , sten_size
            stencil(s) = state(i,k-hs-1+s,ll)
          enddo
          vals(ll) = -stencil(1)/12 + 7*stencil(2)/12 + 7*stencil(3)/12 - stencil(4)/12
          d3_vals(ll) = -stencil(1) + 3*stencil(2) - 3*stencil(3) + stencil(4)
        enddo

        r = vals(ID_DENS) + hy_dens_int(k)
        u = vals(ID_UMOM) / r
        w = vals(ID_WMOM) / r
        t = ( vals(ID_RHOT) + hy_dens_theta_int(k) ) / r
        p = C0*(r*t)**gamma - hy_pressure_int(k)
        if (k == 1 .or. k == nz+1) then
          w                = 0
          d3_vals(ID_DENS) = 0
        endif

        flux(i,k,ID_DENS) = r*w     - hv_coef*d3_vals(ID_DENS)
        flux(i,k,ID_UMOM) = r*w*u   - hv_coef*d3_vals(ID_UMOM)
        flux(i,k,ID_WMOM) = r*w*w+p - hv_coef*d3_vals(ID_WMOM)
        flux(i,k,ID_RHOT) = r*w*t   - hv_coef*d3_vals(ID_RHOT)
      enddo
    enddo

[hip]

    double r, u, w, t, p, hv_coef;
    double stencil[4], d3_vals[NUM_VARS], vals[NUM_VARS];

    //THREADS = ((NZ+1, NX),1)
    int k = blockIdx.x; //Z
    int i = blockIdx.y; //X
    int ll, s;

    hv_coef = -HV_BETA * DZ / (16.0*dt);

    for (ll=0; ll<NUM_VARS; ll++) {
      for (s=0; s<STEN_SIZE; s++) {
          stencil[s] = state[ll][k+s][i+HS];
      }
      vals[ll] = (-stencil[0]/12.0) + 7.0*stencil[1]/12.0 + 7.0*stencil[2]/12.0 - stencil[3]/12.0;
      d3_vals[ll] = (-stencil[0]) + 3.0*stencil[1] - 3.0*stencil[2] + stencil[3];
    }

	r = vals[ID_DENS-1] + hy_dens_int[k];
	u = vals[ID_UMOM-1] / r;
	w = vals[ID_WMOM-1] / r;
	t = ( vals[ID_RHOT-1] + hy_dens_theta_int[k] ) / r;
	p = C0 * pow((r*t), GAMMA) - hy_pressure_int[k];

	if (k == 0 || k == NZ) {
	  w                = 0.0;
	  d3_vals[ID_DENS-1] = 0.0;
	}

    flux[ID_DENS-1][k][i] = r*w     - hv_coef*d3_vals[ID_DENS-1];
    flux[ID_UMOM-1][k][i] = r*w*u   - hv_coef*d3_vals[ID_UMOM-1];
    flux[ID_WMOM-1][k][i] = r*w*w+p - hv_coef*d3_vals[ID_WMOM-1];
    flux[ID_RHOT-1][k][i] = r*w*t   - hv_coef*d3_vals[ID_RHOT-1];

