[fortran, fortran_openacc]

    integer :: i, ll

    !$acc parallel loop collapse(2) present(state, hy_dens_cell) ! async
    do ll = 1 , NUM_VARS
      do i = 1-hs,nx+hs
        if (ll == ID_WMOM) then
          state(i,-1  ,ll) = 0
          state(i,0   ,ll) = 0
          state(i,nz+1,ll) = 0
          state(i,nz+2,ll) = 0
        else if (ll == ID_UMOM) then
          state(i,-1  ,ll) = state(i,1 ,ll) / hy_dens_cell( 1) * hy_dens_cell(-1  )
          state(i,0   ,ll) = state(i,1 ,ll) / hy_dens_cell( 1) * hy_dens_cell( 0  )
          state(i,nz+1,ll) = state(i,nz,ll) / hy_dens_cell(nz) * hy_dens_cell(nz+1)
          state(i,nz+2,ll) = state(i,nz,ll) / hy_dens_cell(nz) * hy_dens_cell(nz+2)
        else
          state(i,-1  ,ll) = state(i,1 ,ll)
          state(i,0   ,ll) = state(i,1 ,ll)
          state(i,nz+1,ll) = state(i,nz,ll)
          state(i,nz+2,ll) = state(i,nz,ll)
        endif
      enddo
    enddo

[hip]

    int ll = blockIdx.x; // var
    int i = blockIdx.y;  //X

	if (ll == ID_WMOM -1) {
	  state[ll][0][i]       = 0;
	  state[ll][1][i]       = 0;
	  state[ll][NZ+HS][i]   = 0;
	  state[ll][NZ+HS+1][i] = 0;
	} else if (ll == ID_UMOM -1) {
	  state[ll][0][i]       = state[ll][HS][i] / hy_dens_cell[HS] * hy_dens_cell[0];
	  state[ll][1][i]       = state[ll][HS][i] / hy_dens_cell[HS] * hy_dens_cell[1];
	  state[ll][NZ+HS][i]   = state[ll][NZ+HS-1][i] / hy_dens_cell[NZ+HS-1] * hy_dens_cell[NZ+HS];
	  state[ll][NZ+HS+1][i] = state[ll][NZ+HS-1][i] / hy_dens_cell[NZ+HS-1] * hy_dens_cell[NZ+HS+1];
	} else {
	  state[ll][0][i]       = state[ll][HS][i];
	  state[ll][1][i]       = state[ll][HS][i];
	  state[ll][NZ+HS][i]   = state[ll][NZ+HS-1][i];
	  state[ll][NZ+HS+1][i] = state[ll][NZ+HS-1][i];
    }

