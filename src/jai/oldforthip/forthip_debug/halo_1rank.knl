[fortran, fortran_openacc]

    integer :: k,ll

!    print *, "BBBBBfore: :", state(-1, 1, 1)

    !$acc parallel loop collapse(2) present(state) async
    do ll = 1 , NUM_VARS
        do k = 1 , nz
          state(-1  ,k,ll) = state(nx-1,k,ll)
          state(0   ,k,ll) = state(nx  ,k,ll)
          state(nx+1,k,ll) = state(1   ,k,ll)
          state(nx+2,k,ll) = state(2   ,k,ll)
        enddo
    enddo

!    print *, "AAAAAfter: :", state(-1, 1, 1)

[hip]
 
    // THREADS = ((NUM_VARS, NZ),1)
    int ll = blockIdx.x;
    int k = blockIdx.y;

/*
    if (ll==0 && k==0) {
		printf("BBBBBfore: %.16f\n", state[0][HS][0]);
        printf("%.16f : %.16f\n", state[ll][k+HS][0], state[ll][k+HS][NX]);
        printf("%.16f : %.16f\n", state[ll][k+HS][1], state[ll][k+HS][NX+1]);
        printf("%.16f : %.16f\n", state[ll][k+HS][NX+HS], state[ll][k+HS][2]);
        printf("%.16f : %.16f\n", state[ll][k+HS][NX+HS+1], state[ll][k+HS][3]);
    }
*/
    state[ll][k+HS][0] = state[ll][k+HS][NX];
    state[ll][k+HS][1] = state[ll][k+HS][NX+1];
    state[ll][k+HS][NX+HS] = state[ll][k+HS][2];
    state[ll][k+HS][NX+HS+1] = state[ll][k+HS][3];

/*
    if (ll==0 && k==0) {
		printf("AAAAAfter: %.16f\n", state[0][HS][0]);
        printf("%.16f : %.16f\n", state[ll][k+HS][0], state[ll][k+HS][NX]);
        printf("%.16f : %.16f\n", state[ll][k+HS][1], state[ll][k+HS][NX+1]);
        printf("%.16f : %.16f\n", state[ll][k+HS][NX+HS], state[ll][k+HS][2]);
        printf("%.16f : %.16f\n", state[ll][k+HS][NX+HS+1], state[ll][k+HS][3]);
    }
*/

